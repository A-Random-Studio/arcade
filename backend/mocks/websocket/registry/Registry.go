// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	identifier "github.com/bseto/arcade/backend/websocket/identifier"
	mock "github.com/stretchr/testify/mock"
)

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

// GetClientSlice provides a mock function with given fields:
func (_m *Registry) GetClientSlice() []*identifier.UserDetails {
	ret := _m.Called()

	var r0 []*identifier.UserDetails
	if rf, ok := ret.Get(0).(func() []*identifier.UserDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*identifier.UserDetails)
		}
	}

	return r0
}

// GetClientUserDetail provides a mock function with given fields: clientID
func (_m *Registry) GetClientUserDetail(clientID identifier.ClientUUIDStruct) *identifier.UserDetails {
	ret := _m.Called(clientID)

	var r0 *identifier.UserDetails
	if rf, ok := ret.Get(0).(func(identifier.ClientUUIDStruct) *identifier.UserDetails); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identifier.UserDetails)
		}
	}

	return r0
}

// Register provides a mock function with given fields: send, clientID
func (_m *Registry) Register(send chan []byte, clientID identifier.ClientUUIDStruct) {
	_m.Called(send, clientID)
}

// SendToCaller provides a mock function with given fields: clientID, message
func (_m *Registry) SendToCaller(clientID identifier.ClientUUIDStruct, message []byte) {
	_m.Called(clientID, message)
}

// SendToSameHub provides a mock function with given fields: message
func (_m *Registry) SendToSameHub(message []byte) {
	_m.Called(message)
}

// SendToSameHubExceptCaller provides a mock function with given fields: clientID, message
func (_m *Registry) SendToSameHubExceptCaller(clientID identifier.ClientUUIDStruct, message []byte) {
	_m.Called(clientID, message)
}

// Unregister provides a mock function with given fields: clientID
func (_m *Registry) Unregister(clientID identifier.ClientUUIDStruct) bool {
	ret := _m.Called(clientID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(identifier.ClientUUIDStruct) bool); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
