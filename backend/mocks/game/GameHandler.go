// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	json "encoding/json"

	identifier "github.com/bseto/arcade/backend/websocket/identifier"

	mock "github.com/stretchr/testify/mock"

	registry "github.com/bseto/arcade/backend/websocket/registry"
)

// GameHandler is an autogenerated mock type for the GameHandler type
type GameHandler struct {
	mock.Mock
}

// ClientQuit provides a mock function with given fields: clientID, reg
func (_m *GameHandler) ClientQuit(clientID identifier.Client, reg registry.Registry) {
	_m.Called(clientID, reg)
}

// HandleInteraction provides a mock function with given fields: api, message, caller, _a3
func (_m *GameHandler) HandleInteraction(api string, message json.RawMessage, caller identifier.Client, _a3 registry.Registry) {
	_m.Called(api, message, caller, _a3)
}

// ListensTo provides a mock function with given fields:
func (_m *GameHandler) ListensTo() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *GameHandler) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewClient provides a mock function with given fields: clientID, reg
func (_m *GameHandler) NewClient(clientID identifier.Client, reg registry.Registry) {
	_m.Called(clientID, reg)
}
